{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caspar\\\\Desktop\\\\static-website\\\\src\\\\components\\\\countdown\\\\Countdown.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport classNames from \"classnames\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Countdown = ({\n  targetDate,\n  onEnd,\n  className: extraClasses = \"\",\n  size = \"md\"\n}) => {\n  _s();\n  const calculateTimeLeft = () => {\n    const difference = +targetDate - +new Date();\n    let timeLeft = {};\n    if (difference > 0) {\n      return {\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n        hours: Math.floor(difference / (1000 * 60 * 60) % 24),\n        minutes: Math.floor(difference / 1000 / 60 % 60),\n        seconds: Math.floor(difference / 1000 % 60)\n      };\n    } else {\n      return null;\n    }\n  };\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n    return () => clearTimeout(timer);\n  });\n  const memoizedClasses = useMemo(() => classNames(\n  // Add your base classes for the countdown timer here\n  \"rounded-lg font-bold justify-center text-center overflow-hidden transition\",\n  // Add a function to determine the size similar to buttonSizes if needed\n  extraClasses), [size, extraClasses]);\n  if (!timeLeft) {\n    onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n  const timerComponents = Object.keys(timeLeft).map(interval => {\n    if (!timeLeft[interval]) {\n      return \"00\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-2xl font-bold mx-1\",\n      children: [timeLeft[interval], \" \", interval]\n    }, interval, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: memoizedClasses,\n    children: timerComponents.length ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Time's up!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(Countdown, \"r5EnQ5rX+x9TeapxtQZnUzWhSgc=\");\n_c = Countdown;\nexport default Countdown;\nvar _c;\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","classNames","Fragment","_Fragment","jsxDEV","_jsxDEV","Countdown","targetDate","onEnd","className","extraClasses","size","_s","calculateTimeLeft","difference","Date","timeLeft","days","Math","floor","hours","minutes","seconds","setTimeLeft","timer","setTimeout","clearTimeout","memoizedClasses","timerComponents","Object","keys","map","interval","children","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["C:/Users/caspar/Desktop/static-website/src/components/countdown/Countdown.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { ICountdownClock, ICountdownProps } from 'types';\r\n\r\nexport const Countdown = ({\r\n  targetDate,\r\n  onEnd,\r\n  className: extraClasses = \"\",\r\n  size = \"md\",\r\n}: ICountdownProps): JSX.Element => {\r\n  const calculateTimeLeft = ():  ICountdownClock | null => {\r\n    const difference = +targetDate - +new Date();\r\n    let timeLeft = {};\r\n\r\n    if (difference > 0) {\r\n      return {\r\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\r\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n        minutes: Math.floor((difference / 1000 / 60) % 60),\r\n        seconds: Math.floor((difference / 1000) % 60),\r\n      };\r\n    } else {\r\n      return null\r\n    }\r\n  };\r\n\r\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setTimeLeft(calculateTimeLeft());\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(timer);\r\n  });\r\n\r\n  const memoizedClasses = useMemo(\r\n    () =>\r\n      classNames(\r\n        // Add your base classes for the countdown timer here\r\n        \"rounded-lg font-bold justify-center text-center overflow-hidden transition\",\r\n        // Add a function to determine the size similar to buttonSizes if needed\r\n        extraClasses,\r\n      ),\r\n    [size, extraClasses],\r\n  );\r\n\r\n  if (!timeLeft) {\r\n    onEnd?.();\r\n    return <></>;\r\n  }\r\n\r\n  const timerComponents = (Object.keys(timeLeft) as Array<keyof ICountdownClock>).map(interval => {\r\n    if (!timeLeft[interval] as unknown as string) {\r\n      return \"00\";\r\n    }\r\n\r\n    return (\r\n      <span key={interval} className=\"text-2xl font-bold mx-1\">\r\n        {timeLeft[interval] as unknown as string} {interval}\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={memoizedClasses}>\r\n      {\r\n      timerComponents.length \r\n        ? (<div></div> )\r\n        : <span>Time's up!</span>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countdown;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}