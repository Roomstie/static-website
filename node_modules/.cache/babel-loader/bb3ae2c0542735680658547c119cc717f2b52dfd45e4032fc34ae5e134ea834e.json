{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caspar\\\\Desktop\\\\static-website\\\\src\\\\components\\\\countdown\\\\Countdown.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateTimeLeft = targetDate => {\n  const difference = +targetDate - +new Date();\n  let timeLeft = {};\n  if (difference > 0) {\n    return {\n      days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n      hours: Math.floor(difference / (1000 * 60 * 60) % 24),\n      minutes: Math.floor(difference / 1000 / 60 % 60),\n      seconds: Math.floor(difference / 1000 % 60)\n    };\n  } else {\n    return null;\n  }\n};\nexport const Countdown = ({\n  targetDate,\n  onEnd,\n  className: extraClasses = \"\",\n  size = \"md\"\n}) => {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(null);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTimeLeft(calculateTimeLeft(targetDate));\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n  const memoizedClasses = useMemo(() => classNames(\n  // Add your base classes for the countdown timer here\n  \"rounded-lg font-bold justify-center text-center overflow-hidden transition\",\n  // Add a function to determine the size similar to buttonSizes if needed\n  extraClasses), [size, extraClasses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: memoizedClasses,\n    children: timeLeft ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(timeLeft).map(interval => {\n        if (!timeLeft[interval]) {\n          return \"00\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-2xl font-bold mx-1\",\n          children: [timeLeft[interval], \" \", interval]\n        }, interval, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Time's up!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Countdown, \"DirORNJIe8PUu9sp1fqnl6gARWA=\");\n_c = Countdown;\nexport default Countdown;\nvar _c;\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","classNames","jsxDEV","_jsxDEV","calculateTimeLeft","targetDate","difference","Date","timeLeft","days","Math","floor","hours","minutes","seconds","Countdown","onEnd","className","extraClasses","size","_s","setTimeLeft","timer","setTimeout","clearTimeout","memoizedClasses","children","Object","keys","map","interval","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/caspar/Desktop/static-website/src/components/countdown/Countdown.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { ICountdownClock, ICountdownProps } from 'types';\r\n\r\nconst calculateTimeLeft = (targetDate: Date):  ICountdownClock | null => {\r\n  const difference = +targetDate - +new Date();\r\n  let timeLeft = {};\r\n\r\n  if (difference > 0) {\r\n    return {\r\n      days: Math.floor(difference / (1000 * 60 * 60 * 24)),\r\n      hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n      minutes: Math.floor((difference / 1000 / 60) % 60),\r\n      seconds: Math.floor((difference / 1000) % 60),\r\n    };\r\n  } else {\r\n    return null\r\n  }\r\n};\r\n\r\nexport const Countdown = ({\r\n  targetDate,\r\n  onEnd,\r\n  className: extraClasses = \"\",\r\n  size = \"md\",\r\n}: ICountdownProps): JSX.Element => {\r\n  \r\n\r\n  const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setTimeLeft(calculateTimeLeft(targetDate));\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  const memoizedClasses = useMemo(\r\n    () =>\r\n      classNames(\r\n        // Add your base classes for the countdown timer here\r\n        \"rounded-lg font-bold justify-center text-center overflow-hidden transition\",\r\n        // Add a function to determine the size similar to buttonSizes if needed\r\n        extraClasses,\r\n      ),\r\n    [size, extraClasses],\r\n  );\r\n\r\n  return (\r\n    <div className={memoizedClasses}>\r\n      {\r\n      timeLeft \r\n        ? (\r\n          <div>\r\n            {\r\n              (Object.keys(timeLeft) as Array<keyof ICountdownClock>).map(interval => {\r\n                if (!timeLeft[interval] as unknown as string) {\r\n                  return \"00\";\r\n                }\r\n            \r\n                return (\r\n                  <span key={interval} className=\"text-2xl font-bold mx-1\">\r\n                    {timeLeft[interval] as unknown as string} {interval}\r\n                  </span>\r\n                );\r\n              })\r\n            }\r\n          </div>\r\n        )\r\n        : <span>Time's up!</span>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countdown;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGpC,MAAMC,iBAAiB,GAAIC,UAAgB,IAA8B;EACvE,MAAMC,UAAU,GAAG,CAACD,UAAU,GAAG,CAAC,IAAIE,IAAI,CAAC,CAAC;EAC5C,IAAIC,QAAQ,GAAG,CAAC,CAAC;EAEjB,IAAIF,UAAU,GAAG,CAAC,EAAE;IAClB,OAAO;MACLG,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACL,UAAU,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;MACpDM,KAAK,EAAEF,IAAI,CAACC,KAAK,CAAEL,UAAU,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;MACvDO,OAAO,EAAEH,IAAI,CAACC,KAAK,CAAEL,UAAU,GAAG,IAAI,GAAG,EAAE,GAAI,EAAE,CAAC;MAClDQ,OAAO,EAAEJ,IAAI,CAACC,KAAK,CAAEL,UAAU,GAAG,IAAI,GAAI,EAAE;IAC9C,CAAC;EACH,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMS,SAAS,GAAGA,CAAC;EACxBV,UAAU;EACVW,KAAK;EACLC,SAAS,EAAEC,YAAY,GAAG,EAAE;EAC5BC,IAAI,GAAG;AACQ,CAAC,KAAkB;EAAAC,EAAA;EAGlC,MAAM,CAACZ,QAAQ,EAAEa,WAAW,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMuB,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7BF,WAAW,CAACjB,iBAAiB,CAACC,UAAU,CAAC,CAAC;IAC5C,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMmB,YAAY,CAACF,KAAK,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,eAAe,GAAGzB,OAAO,CAC7B,MACEC,UAAU;EACR;EACA,4EAA4E;EAC5E;EACAiB,YACF,CAAC,EACH,CAACC,IAAI,EAAED,YAAY,CACrB,CAAC;EAED,oBACEf,OAAA;IAAKc,SAAS,EAAEQ,eAAgB;IAAAC,QAAA,EAE9BlB,QAAQ,gBAEJL,OAAA;MAAAuB,QAAA,EAEKC,MAAM,CAACC,IAAI,CAACpB,QAAQ,CAAC,CAAkCqB,GAAG,CAACC,QAAQ,IAAI;QACtE,IAAI,CAACtB,QAAQ,CAACsB,QAAQ,CAAC,EAAuB;UAC5C,OAAO,IAAI;QACb;QAEA,oBACE3B,OAAA;UAAqBc,SAAS,EAAC,yBAAyB;UAAAS,QAAA,GACrDlB,QAAQ,CAACsB,QAAQ,CAAC,EAAsB,GAAC,EAACA,QAAQ;QAAA,GAD1CA,QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEb,CAAC;MAEX,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAED,CAAC,gBAEN/B,OAAA;MAAAuB,QAAA,EAAM;IAAU;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAExB,CAAC;AAEV,CAAC;AAACd,EAAA,CAtDWL,SAAS;AAAAoB,EAAA,GAATpB,SAAS;AAwDtB,eAAeA,SAAS;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}